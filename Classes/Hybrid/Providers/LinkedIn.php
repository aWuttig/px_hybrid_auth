<?php
namespace Portrino\PxHybridAuth\Hybrid\Providers;

/***************************************************************
 *  Copyright notice
 *
 *  (c) 2016 Andre Wuttig <wuttig@portrino.de>, portrino GmbH
 *
 *  All rights reserved
 *
 *  This script is part of the TYPO3 project. The TYPO3 project is
 *  free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  The GNU General Public License can be found at
 *  http://www.gnu.org/copyleft/gpl.html.
 *
 *  This script is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  This copyright notice MUST APPEAR in all copies of the script!
 ***************************************************************/

/**
 * Class LinkedIn
 *
 * @package Portrino\PxHybridAuth\Hybrid\Providers
 */
class LinkedIn extends \Hybrid_Providers_LinkedIn {

    /**
     * Common providers adapter constructor
     *
     * @param Numeric/String $providerId
     * @param array $config
     * @param array $params
     */
    function __construct($providerId, $config, $params = NULL) {
        parent::__construct($providerId, $config, $params); // TODO: Change the autogenerated stub
        $this->user = new \Portrino\PxHybridAuth\Hybrid\User();
    }

    /**
     * load the user profile from the IDp api client
     */
    function getUserProfile() {
        try {
            // http://developer.linkedin.com/docs/DOC-1061
            $response = $this->api->profile('~:(id,first-name,last-name,public-profile-url,picture-url,picture-urls::(original),email-address,date-of-birth,phone-numbers,summary,positions,location,industry,)');
        }
        catch( \LinkedInException $e ){
            throw new \Exception( "User profile request failed! {$this->providerId} returned an error: $e", 6 );
        }

        if( isset( $response['success'] ) && $response['success'] === TRUE ){
            $data = @ new \SimpleXMLElement( $response['linkedin'] );

            if ( ! is_object( $data ) ){
                throw new \Exception( "User profile request failed! {$this->providerId} returned an invalid xml data.", 6 );
            }

            $this->user->profile->identifier  = (string) $data->{'id'};
            $this->user->profile->firstName   = (string) $data->{'first-name'};
            $this->user->profile->lastName    = (string) $data->{'last-name'};
            $this->user->profile->displayName = trim( $this->user->profile->firstName . " " . $this->user->profile->lastName );

            $this->user->profile->email         = (string) $data->{'email-address'};
            $this->user->profile->emailVerified = (string) $data->{'email-address'};

            $this->user->profile->photoURL    = (string) $data->{'picture-url'};

            if ($data->{'picture-urls'}) {
                $pictureUrls = $data->{'picture-urls'};
                $attributes = $data->{'picture-urls'}->attributes();
                if (isset($attributes['total']) && (int)$attributes['total'] > 0 ) {
                    foreach ($pictureUrls as $pictureUrl) {
                        $this->user->profile->photoURL = $pictureUrl->{'picture-url'};
                    }
                }
            }

            $this->user->profile->profileURL  = (string) $data->{'public-profile-url'};
            $this->user->profile->description = (string) $data->{'summary'};

            if( $data->{'phone-numbers'} && $data->{'phone-numbers'}->{'phone-number'} ){
                $this->user->profile->phone = (string) $data->{'phone-numbers'}->{'phone-number'}->{'phone-number'};
            }
            else{
                $this->user->profile->phone = null;
            }

            if( $data->{'date-of-birth'} ){
                $this->user->profile->birthDay   = (string) $data->{'date-of-birth'}->day;
                $this->user->profile->birthMonth = (string) $data->{'date-of-birth'}->month;
                $this->user->profile->birthYear  = (string) $data->{'date-of-birth'}->year;
            }

            if ($data->{'positions'}) {
                $positions = $data->{'positions'};
                $attributes = $data->{'positions'}->attributes();
                if (isset($attributes['total']) && (int)$attributes['total'] > 0 ) {
                    foreach ($positions->{'position'} as $position) {
                        if ((string) $position->{'is-current'} == 'true') {
                            $this->user->profile->position = (string)$position->title;
                            if ($position->company) {
                                $this->user->profile->company = (string)$position->company->name;
                            }
                            $this->user->profile->position = (string)$position->title;
                        }
                    }
                }
            }

            if ($data->{'industry'}) {
                $this->user->profile->industry = (string)$data->{'industry'};
            }

            if ($data->{'location'}) {
                $location = $data->{'location'};
                $this->user->profile->city = (string)$location->name;
            }

            return $this->user->profile;

        }
        else {
            throw new \Exception( "User profile request failed! {$this->providerId} returned an invalid response.", 6 );
        }
    }

}
