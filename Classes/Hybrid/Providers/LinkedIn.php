<?php
namespace Portrino\PxHybridAuth\Hybrid\Providers;

    /***************************************************************
     *  Copyright notice
     *
     *  (c) 2016 Andre Wuttig <wuttig@portrino.de>, portrino GmbH
     *
     *  All rights reserved
     *
     *  This script is part of the TYPO3 project. The TYPO3 project is
     *  free software; you can redistribute it and/or modify
     *  it under the terms of the GNU General Public License as published by
     *  the Free Software Foundation; either version 3 of the License, or
     *  (at your option) any later version.
     *
     *  The GNU General Public License can be found at
     *  http://www.gnu.org/copyleft/gpl.html.
     *
     *  This script is distributed in the hope that it will be useful,
     *  but WITHOUT ANY WARRANTY; without even the implied warranty of
     *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     *  GNU General Public License for more details.
     *
     *  This copyright notice MUST APPEAR in all copies of the script!
     ***************************************************************/
use Portrino\PxHybridAuth\Hybrid\User;

/**
 * Class LinkedIn
 *
 * @package Portrino\PxHybridAuth\Hybrid\Providers
 */
class LinkedIn extends \Hybrid_Providers_LinkedIn
{

    /**
     * Common providers adapter constructor
     *
     * @param Numeric /String $providerId
     * @param array $config
     * @param array $params
     */
    function __construct($providerId, $config, $params = null)
    {
        parent::__construct($providerId, $config, $params); // TODO: Change the autogenerated stub
        $this->user = new User();
    }

    /**
     * load the user profile from the IDp api client
     */
    function getUserProfile()
    {

        parent::getUserProfile();

        try {
            // https://developer.linkedin.com/docs/signin-with-linkedin
            $response = $this->api->profile('~:(id,positions,location,industry)');
        } catch (\LinkedInException $e) {
            throw new \Exception("User profile request failed! {$this->providerId} returned an error: $e", 6);
        }


        if (isset($response['success']) && $response['success'] === true) {
            $data = @ new \SimpleXMLElement($response['linkedin']);

            if (!is_object($data)) {
                throw new \Exception("User profile request failed! {$this->providerId} returned an invalid xml data.",
                    6);
            }

            if ($data->{'positions'}) {
                $positions = $data->{'positions'};
                $attributes = $data->{'positions'}->attributes();
                if (isset($attributes['total']) && (int)$attributes['total'] > 0) {
                    foreach ($positions->{'position'} as $position) {
                        if ((string)$position->{'is-current'} == 'true') {
                            $this->user->profile->position = (string)$position->title;
                            if ($position->company) {
                                $this->user->profile->company = (string)$position->company->name;
                            }
                            $this->user->profile->position = (string)$position->title;
                        }
                    }
                }
            }

            if ($data->{'industry'}) {
                $this->user->profile->industry = (string)$data->{'industry'};
            }

            if ($data->{'location'}) {
                $location = $data->{'location'};
                $this->user->profile->city = (string)$location->name;
            }

            return $this->user->profile;

        } else {
            throw new \Exception("User profile request failed! {$this->providerId} returned an invalid response.", 6);
        }
    }

}
