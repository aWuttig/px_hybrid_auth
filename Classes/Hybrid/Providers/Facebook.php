<?php
namespace Portrino\PxHybridAuth\Hybrid\Providers;

    /***************************************************************
     *  Copyright notice
     *
     *  (c) 2016 Andre Wuttig <wuttig@portrino.de>, portrino GmbH
     *
     *  All rights reserved
     *
     *  This script is part of the TYPO3 project. The TYPO3 project is
     *  free software; you can redistribute it and/or modify
     *  it under the terms of the GNU General Public License as published by
     *  the Free Software Foundation; either version 3 of the License, or
     *  (at your option) any later version.
     *
     *  The GNU General Public License can be found at
     *  http://www.gnu.org/copyleft/gpl.html.
     *
     *  This script is distributed in the hope that it will be useful,
     *  but WITHOUT ANY WARRANTY; without even the implied warranty of
     *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     *  GNU General Public License for more details.
     *
     *  This copyright notice MUST APPEAR in all copies of the script!
     ***************************************************************/

/**
 * Class PxHybridAuth_Providers_Facebook
 *
 * @package Portrino\PxHybridAuth\Hybrid\Providers
 */
class Facebook extends \Hybrid_Providers_Facebook
{

    /**
     * Common providers adapter constructor
     *
     * @param Numeric/String $providerId
     * @param array $config
     * @param array $params
     */
    function __construct($providerId, $config, $params = null)
    {
        parent::__construct($providerId, $config, $params); // TODO: Change the autogenerated stub
        $this->user = new \Portrino\PxHybridAuth\Hybrid\User();
    }

    /**
     * load the user profile from the IDp api client
     */
    function getUserProfile()
    {
        // request user profile from fb api
        try {
            $data = $this->api->api('/me');

        } catch (\FacebookApiException $e) {
            throw new \Exception("User profile request failed! {$this->providerId} returned an error: $e", 6);
        }

        // if the provider identifier is not received, we assume the auth has failed
        if (!isset($data["id"])) {
            throw new \Exception("User profile request failed! {$this->providerId} api returned an invalid response.",
                6);
        }

        # store the user profile.
        $this->user->profile->identifier = (array_key_exists('id', $data)) ? $data['id'] : "";
        $this->user->profile->username = (array_key_exists('username', $data)) ? $data['username'] : "";
        $this->user->profile->displayName = (array_key_exists('name', $data)) ? $data['name'] : "";
        $this->user->profile->firstName = (array_key_exists('first_name', $data)) ? $data['first_name'] : "";
        $this->user->profile->lastName = (array_key_exists('last_name', $data)) ? $data['last_name'] : "";
        $this->user->profile->photoURL = "https://graph.facebook.com/" . $this->user->profile->identifier . "/picture?width=150&height=150";
        $this->user->profile->coverInfoURL = "https://graph.facebook.com/" . $this->user->profile->identifier . "?fields=cover";
        $this->user->profile->profileURL = (array_key_exists('link', $data)) ? $data['link'] : "";
        $this->user->profile->webSiteURL = (array_key_exists('website', $data)) ? $data['website'] : "";
        $this->user->profile->gender = (array_key_exists('gender', $data)) ? $data['gender'] : "";
        $this->user->profile->language = (array_key_exists('locale', $data)) ? $data['locale'] : "";
        $this->user->profile->description = (array_key_exists('about', $data)) ? $data['about'] : "";
        $this->user->profile->email = (array_key_exists('email', $data)) ? $data['email'] : "";
        $this->user->profile->emailVerified = (array_key_exists('email', $data)) ? $data['email'] : "";
        $this->user->profile->region = (array_key_exists("hometown", $data) && array_key_exists("name",
                $data['hometown'])) ? $data['hometown']["name"] : "";

        if (!empty($this->user->profile->region)) {
            $regionArr = explode(',', $this->user->profile->region);
            if (count($regionArr) > 1) {
                $this->user->profile->city = trim($regionArr[0]);
                $this->user->profile->country = trim($regionArr[1]);
            }
        }

        if (array_key_exists('birthday', $data)) {
            list($birthday_month, $birthday_day, $birthday_year) = explode("/", $data['birthday']);

            $this->user->profile->birthDay = (int)$birthday_day;
            $this->user->profile->birthMonth = (int)$birthday_month;
            $this->user->profile->birthYear = (int)$birthday_year;
        }

        $photoJsonUri = "https://graph.facebook.com/" . $this->user->profile->identifier . "/picture?width=350&height=350&redirect=false";

        $curl_handle = curl_init();

        curl_setopt($curl_handle, CURLOPT_URL, $photoJsonUri);
        curl_setopt($curl_handle, CURLOPT_CONNECTTIMEOUT, 2);
        curl_setopt($curl_handle, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($curl_handle, CURLOPT_USERAGENT, 'PxHybridAuth');

        $photoJson = curl_exec($curl_handle);
        $photoJsonObj = json_decode($photoJson);

        if (isset($photoJsonObj->data->url)) {
            $this->user->profile->photoURL = $photoJsonObj->data->url;
        }
        return $this->user->profile;
    }
}
