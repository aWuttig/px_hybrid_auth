<?php
/*!
* HybridAuth
* http://hybridauth.sourceforge.net | http://github.com/hybridauth/hybridauth
* (c) 2009-2012, HybridAuth authors | http://hybridauth.sourceforge.net/licenses.html
*/

/**
 * XING.com Provider
 *
 * @author  Fabian Beiner <mail@fabian-beiner.de>
 * @version 1.0.1
 */
class PxHybridAuth_Providers_Xing extends Hybrid_Providers_XING {

    function __construct($providerId, $config, $params = NULL) {
        parent::__construct($providerId, $config, $params); // TODO: Change the autogenerated stub
        $this->user = new PxHybridAuth_Hybrid_User();
    }

    /**
     * Gets the profile of the user who has granted access.
     *
     * @see https://dev.xing.com/docs/get/users/me
     */
    function getUserProfile() {
        $oResponse = $this->api->get('users/me');

        // The HTTP status code needs to be 200 here. If it's not, something is wrong.
        if ($this->api->http_code !== 200) {
            throw new Exception('Profile request failed! ' . $this->providerId . ' API returned an error: ' . $this->errorMessageByStatus($this->api->http_code) . '.');
        }

        // We should have an object by now.
        if (!is_object($oResponse)) {
            throw new Exception('Profile request failed! ' . $this->providerId . ' API returned an error: invalid response.');
        }

        // Redefine the object.
        $oResponse = $oResponse->users[0];

        /**
         * Handle the profile data.
         *
         * @see  http://hybridauth.sourceforge.net/userguide/Profile_Data_User_Profile.html
         */
        $this->user->profile->identifier    = (property_exists($oResponse, 'id'))           ? $oResponse->id           : '';
        $this->user->profile->profileURL    = (property_exists($oResponse, 'permalink'))    ? $oResponse->permalink    : '';
        $this->user->profile->displayName   = (property_exists($oResponse, 'display_name')) ? $oResponse->display_name : '';
        $this->user->profile->description   = (property_exists($oResponse, 'interests'))    ? $oResponse->interests    : ''; // Not really a "description, but anyways â€¦
        $this->user->profile->firstName     = (property_exists($oResponse, 'first_name'))   ? $oResponse->first_name   : '';
        $this->user->profile->lastName      = (property_exists($oResponse, 'last_name'))    ? $oResponse->last_name    : '';
        $this->user->profile->gender        = (property_exists($oResponse, 'gender'))       ? $oResponse->gender       : '';
        $this->user->profile->emailVerified = (property_exists($oResponse, 'active_email')) ? $oResponse->active_email : '';
        $this->user->profile->email = (property_exists($oResponse, 'active_email')) ? $oResponse->active_email : '';

        if ((property_exists($oResponse, 'professional_experience'))) {
            $professionalExperience = $oResponse->professional_experience;
            if ((property_exists($professionalExperience, 'primary_company'))) {
                $primaryCompany =  $professionalExperience->primary_company;
                if (property_exists($primaryCompany, 'name')) {
                    $this->user->profile->company = $primaryCompany->name;
                }
                if (property_exists($primaryCompany, 'description')) {
                    $this->user->profile->position = $primaryCompany->description;
                }
                if (property_exists($primaryCompany, 'industry')) {
                    $this->user->profile->industry = $primaryCompany->industry;
                }
            }
        }

        if ((property_exists($oResponse, 'business_address'))) {
            $businessAddress = $oResponse->business_address;
            $this->user->profile->address = (property_exists($businessAddress, 'street')) ? $businessAddress->street : '';
            $this->user->profile->zip = (property_exists($businessAddress, 'zip_code')) ? $businessAddress->zip_code : '';
            $this->user->profile->city = (property_exists($businessAddress, 'city')) ? $businessAddress->city : '';
            $this->user->profile->country = (property_exists($businessAddress, 'country')) ? $businessAddress->country : '';
            $this->user->profile->region = (property_exists($businessAddress, 'province')) ? $businessAddress->province : '';
        }

        // My own priority: Homepage, blog, other, something else.
        if (property_exists($oResponse, 'web_profiles')) {
            $this->user->profile->webSiteURL = (property_exists($oResponse->web_profiles, 'homepage')) ? $oResponse->web_profiles->homepage[0] : null;
            if (null === $this->user->profile->webSiteURL) {
                $this->user->profile->webSiteURL = (property_exists($oResponse->web_profiles, 'blog')) ? $oResponse->web_profiles->blog[0] : null;
            }
            if (null === $this->user->profile->webSiteURL) {
                $this->user->profile->webSiteURL = (property_exists($oResponse->web_profiles, 'other')) ? $oResponse->web_profiles->other[0] : null;
            }
            // Just use *anything*!
            if (null === $this->user->profile->webSiteURL) {
                foreach ($oResponse->web_profiles as $aUrl) {
                    $this->user->profile->webSiteURL = $aUrl[0];
                    break;
                }
            }
        }


        // We use the largest picture available.
        if (property_exists($oResponse, 'photo_urls') && property_exists($oResponse->photo_urls, 'size_original')) {
            $this->user->profile->photoURL = (property_exists($oResponse->photo_urls, 'size_original')) ? $oResponse->photo_urls->size_original : '';
        }

        // Try to get the native language first.
        if (property_exists($oResponse, 'languages')) {
            foreach ($oResponse->languages as $sLanguage => $sSkill) {
                $this->user->profile->language = strtoupper($sLanguage);
                if ($sSkill == 'NATIVE') {
                    break;
                }
            }
        }

        // Age stuff.
        if (property_exists($oResponse, 'birth_date')) {
            $this->user->profile->age        = floor((time() - strtotime($oResponse->birth_date->year . '-' . $oResponse->birth_date->month . '-' . $oResponse->birth_date->day)) / 31556926);
            $this->user->profile->birthDay   = $oResponse->birth_date->day;
            $this->user->profile->birthMonth = $oResponse->birth_date->month;
            $this->user->profile->birthYear  = $oResponse->birth_date->year;
        }

        // As XING is a business network, users are more likely to be interested in the business address.
        $oAddress = (property_exists($oResponse, 'business_address')) ? $oResponse->business_address : null;
        if (null === $oAddress && property_exists($oResponse, 'private_address')) {
            $oAddress = $oResponse->private_address;
        }
        if (null !== $oAddress) {
            $this->user->profile->phone   = (property_exists($oAddress, 'phone'))        ? $oAddress->phone        : '';
            $this->user->profile->address = (property_exists($oAddress, 'street'))       ? $oAddress->street       : '';
            $this->user->profile->country = (property_exists($oAddress, 'country'))      ? $oAddress->country      : '';
            $this->user->profile->region  = (property_exists($oAddress, 'province'))     ? $oAddress->province     : '';
            $this->user->profile->city    = (property_exists($oAddress, 'city'))         ? $oAddress->city         : '';
            $this->user->profile->zip     = (property_exists($oAddress, 'zip_code'))     ? $oAddress->zip_code     : '';
            $this->user->profile->email   = (property_exists($oAddress, 'email'))        ? $oAddress->email        : '';
            if (null === $this->user->profile->language) {
                $this->user->profile->language = (property_exists($oAddress, 'country')) ? $oAddress->country : '';
            }
            // The following two are actually not part of the normalized user profile structure used by HybridAuth...
            $this->user->profile->mobile  = (property_exists($oAddress, 'mobile_phone')) ? $oAddress->mobile_phone : '';
            $this->user->profile->fax     = (property_exists($oAddress, 'fax'))          ? $oAddress->fax          : '';
        }

        return $this->user->profile;
    }
}
